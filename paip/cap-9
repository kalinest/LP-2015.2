;;O capítulo fala de ferramentas e técnicas usadas para otimizar funções tornando o seu tempo de resposta menor e sempre dando a melhor resposta. O primeiro exemplo usado é Fibbonaci, que não tem nada de novo mas é um ótimo início para entender como essas ferramentas funcionam.

> (defun fib (n)
	   (if (<= n 1) 1
	       (+ (fib (- n 1)) (fib (- n 2)))))

;;A função memo é criada para ser uma recursiva que memoriza os resultados.

> (defun memo (fn)
	   (let ((table (make-hash-table)))
	     #'(lambda (x)
		 (multiple-value-bind (val found-p)
		     (gethash x table)
		   (if found-p
		       val
		       (setf (gethash x table) (funcall fn x)))))))

> (setf memo-fib (memo #'fib))

;;Com o fib traced

> (funcall memo-fib 3)
  0: (FIB 3)
    1: (FIB 2)
      2: (FIB 1)
      2: FIB returned 1
      2: (FIB 0)
      2: FIB returned 1
    1: FIB returned 2
    1: (FIB 1)
    1: FIB returned 1
  0: FIB returned 3
3

;;Esta função calculou fib 3 apenas uma vez mas o problema é que ela calcula o fib de 2 várias vezes na mesma função. 
Seria melhor ter uma função recursiva interna que memorizasse os resultados otimamente. Podemos facilmente fazer isso com a função memoize.

> (defun memoize (fn-name)
	   (setf (symbol-function fn-name) (memo (symbol-function fn-name))))

;;Agora comparando fib com memoize e sem memoize. Primeiro a sem.

> (fib 5)
  0: (FIB 5)
    1: (FIB 4)
      2: (FIB 3)
        3: (FIB 2)
          4: (FIB 1)
          4: FIB returned 1
          4: (FIB 0)
          4: FIB returned 1
        3: FIB returned 2
        3: (FIB 1)
        3: FIB returned 1
      2: FIB returned 3
      2: (FIB 2)
        3: (FIB 1)
        3: FIB returned 1
        3: (FIB 0)
        3: FIB returned 1
      2: FIB returned 2
    1: FIB returned 5
    1: (FIB 3)
      2: (FIB 2)
        3: (FIB 1)
        3: FIB returned 1
        3: (FIB 0)
        3: FIB returned 1
      2: FIB returned 2
      2: (FIB 1)
      2: FIB returned 1
    1: FIB returned 3
  0: FIB returned 8
8

;;É possível ver que no final (fib 1) é calculado 5 vezes (!!) o que mostra a ineficiência da função.

> (memoize 'fib)
#<CLOSURE (LAMBDA (X) :IN MEMO) {1004F1D73B}>

> (fib 5)
  0: (FIB 5)
    1: (FIB 4)
      2: (FIB 3)
        3: (FIB 2)
          4: (FIB 1)
          4: FIB returned 1
          4: (FIB 0)
          4: FIB returned 1
        3: FIB returned 2
      2: FIB returned 3
    1: FIB returned 5
  0: FIB returned 8
8

;;É evidente que a função memoize otimiza o resultado de fib, o que era o que queríamos. 
Fib pode ser uma função simples de ser gerada mas otimizá-la requer um conhecimento de funções recursivas, uma ferramenta fundamental em lisp. Essse é o início do capítulo e mais a frente ele pega funções já criadas por nós. Vale muito a pena ler esse capítulo para encerrar o curso pensando não somente em fazer código que rode mas pensando no melhor código a rodar.
